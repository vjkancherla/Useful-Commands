One of the most challenging projects I worked on was containerizing database migrations using Flyway. Initially, Jenkins dynamically triggered Maven and Ansible during each CD job or whilst creating ephemeral test environments for feature branches, causing complexity and delays. Maven would download artifacts, move files, and perform placeholder substitution, while Ansible connected remotely from Jenkins in a separate AWS account to RDS instances in other AWS accounts for non-prod and dev environments. This introduced latency, execution delays, and manual intervention, without built-in post-migration verification."
"I redesigned the approach by building a container image upfront, bundling all migration scripts, and then executing migrations directly in Kubernetes using Helm during CI. This eliminated on-the-fly execution, reduced build time by 8 minutes, and minimized cognitive load for engineers. Additionally, running migrations within the same AWS account where the RDS instance resides lowered latency and data transfer costs, improving efficiency."
"To ensure migrations worked across multiple schemas, I generalized the Helm values.yaml file, dynamically templating connection details and usernames using Helm’s tpl() function. This removed the need for hardcoded configurations, making deployments adaptable to different environments."
"Observability was another key enhancement. I pushed all logs into Loki and built a custom Grafana dashboard to provide real-time insights into migration execution. If something failed, engineers could instantly diagnose issues rather than manually digging through logs, significantly improving troubleshooting speed."
"Additionally, we ran tests to determine the most optimal EC2 instance type using Karpenter, ensuring all migration jobs ran on the same instance. This prevented resource bottlenecks, improved consistency, and optimized compute allocation, allowing migrations to execute smoothly without contention."
"Beyond optimization, I tackled additional challenges, including ensuring correct migration sequencing, transforming Maven-based placeholders for Flyway compliance, and resolving CI/CD conflicts where the exec-maven-plugin was unintentionally triggered. To enforce structured execution, I designed a Helm-based deployment using hooks and weights, ensuring config maps were created first, DB initialization jobs were executed next, and post-install hooks verified migration success."
"Ultimately, this transformation streamlined database migrations, improved maintainability, and eliminated unnecessary complexity. By replacing manual Jenkins-Maven-Ansible processes with a containerized, Helm-driven approach, generalizing schema configurations, integrating Loki for observability, optimizing EC2 instance allocation with Karpenter, and refining execution pipelines, I improved deployment speed, reduced cognitive load, cut latency and data costs, and ensured greater automation and consistency across environments. This experience strengthened my ability to design scalable workflows, troubleshoot CI/CD challenges, and optimize cloud-based deployments."

----

"One of the most impactful projects I worked on was designing and building a fully-private AWS EKS platform for non-prod and dev environments supporting a next-generation payments application. This required deep expertise in networking, security, observability, CI/CD automation, and workload efficiency, ensuring it followed AWS best practices."
"Networking scalability was a major challenge. AWS’s default VPC networking didn’t provide enough IP addresses, so I integrated Calico to expand available IPs while also enabling Kubernetes-native network policies for better security and traffic control. To expose workloads externally, I configured NGINX Ingress Controller with an AWS NLB for seamless routing."
"Compute optimization was another critical focus. I integrated KEDA for auto-scaling, allowing workloads to dynamically scale based on demand, and used Karpenter to optimize EC2 instance selection, ensuring all migration jobs ran on the same machine to eliminate resource bottlenecks. Additionally, I introduced multi-stage Docker builds, significantly reducing image sizes and improving deployment efficiency."
"Security was a top priority, so I implemented RBAC roles, IAM roles, and whitelisted access to restrict cluster entry. Within workloads, I enforced pod security contexts to prevent privilege escalation, set resource quotas per namespace, and defined memory-only resource limits for containers. I also deployed OPA Gatekeeper to enforce best-practice security policies, such as limiting the number of replicas, requiring resource limits, and enforcing readiness/liveness probes."
"Observability and cost management were key factors in ensuring a reliable and efficient platform. I integrated Kubecost to monitor and optimize Kubernetes resource spending. To identify optimal workload resource allocations, I used Prometheus alongside Kubernetes resource recommendation tools. Custom Grafana dashboards provided real-time insights into workload utilization, while Loki captured logs, making debugging fast and efficient."
"For CI/CD automation, I built a robust pipeline that handled everything from code validation to secure artifact deployment. CI steps included unit testing, SonarQube static analysis, container security scans, Helm chart validation using Trivy, and publishing artifacts to JFrog. The CD pipeline automated deployments of validated Helm charts, spun up dependency mock apps, ran integration tests, and tore down resources for efficiency."
"A key innovation was introducing ephemeral test environments for feature branches. When a developer created a deploy/ branch, Jenkins triggered a full CI/CD pipeline to spin up a fully operational 'Pilot' environment, enabling realistic testing without manual intervention. To maintain stability, I also ensured Kubernetes versions were updated regularly to stay aligned with security patches and performance improvements."
"Beyond the technical implementations, I mentored junior engineers, authored extensive documentation, and led knowledge-sharing sessions, ensuring platform maintainability and team growth. This project strengthened my ability to design scalable cloud-native infrastructure, optimize workload efficiency, enhance security automation, and drive team development—skills that are critical for managing modern cloud environments."
